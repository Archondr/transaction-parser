/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package practice;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;

import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

public class TransactionParser {

    // Aggregation inputs
    // ActionDate
    // ActionDate, AccountCode
    // ActionDate, AccountCode, AccountType
    public static void main(String[] args) {
        String input = getCriteria("C:/Users/lmcaa/IdeaProjects/practice/input.txt");
        System.out.println(input);
        Iterable<CSVRecord> records = readInCsv("C:/Users/lmcaa/IdeaProjects/practice/data.csv");
        ArrayList<Transaction> transactions = new ArrayList<>();
        for (CSVRecord record : records) {
            transactions.add(Transaction.builder().date(record.get("Date")).accountCode(record.get("AccountCode")).amount(parseAmount(record.get("Amount"), record.get("CreditDebitCode"))).decimal(Integer.valueOf(record.get("Decimal"))).build());
        }

        if(input.equals("ActionDate")) {
            Map<String, Long> aggregatedTransactions = transactions.stream().collect(Collectors.groupingBy(Transaction::getDate, Collectors.summingLong(Transaction::getAmount)));
            printScenario1Output(aggregatedTransactions);
        } else if(input.equals("ActionDate, AccountCode")) {
            Map<String, Map<String, Long>> aggregatedTransactions = transactions.stream().collect(Collectors.groupingBy(Transaction::getDate, Collectors.groupingBy(Transaction::getAccountCode, Collectors.summingLong(Transaction::getAmount))));
            printScenario2Output(aggregatedTransactions);
        } else {
            System.out.println("To be expanded to be able to dynamically cover other other aggregation scenarios.");
        }
    }

    public static void printScenario1Output(Map<String, Long> aggregatedTransactions) {
        for(String date: aggregatedTransactions.keySet()) {
            System.out.println(date + " " + aggregatedTransactions.get(date));
        }
    }

    public static void printScenario2Output(Map<String, Map<String, Long>> aggregatedTransactions) {
        for(String date: aggregatedTransactions.keySet()) {
            for(String accountType: aggregatedTransactions.get(date).keySet()){
                System.out.println(date + " " + accountType + " " + aggregatedTransactions.get(date).get(accountType));
            }
        }
    }

    public static Long parseAmount(String amount, String creditDebitCode) {
        Long intAmount = Long.valueOf(amount);
        if (creditDebitCode.equals("D")) {
            intAmount = intAmount * -1;
        }
        return intAmount;
    }

    private static Iterable<CSVRecord> readInCsv(String fileName) {
        Reader in = null;
        try {
            in = new FileReader(fileName);
            return CSVFormat.RFC4180.withFirstRecordAsHeader().parse(in);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static String getCriteria(String fileName) {
        try {
            Scanner scanner = new Scanner(new File(fileName));
            return scanner.nextLine();
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
    }
}
